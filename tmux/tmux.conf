# ==========================
# ===  General settings  ===
# ==========================

set-environment -g TMUX_PLUGIN_MANAGER_PATH '~/.config/tmux/plugins'

# OBS: time values in ms
set -s default-terminal "tmux-256color"
set -sa terminal-overrides ',*:RGB'
set -s buffer-limit 20                  # max number of buffers
set -s escape-time 0                    # time to wait before assuming a key is Escape
set -s focus-events on                  # wether to send focus events to applications
set -g history-limit 50000              # maximum number of lines to keep for each pane
set -g display-panes-time 1500          # duration of display-panes (overlay with pane numbers)
set -g display-time 2000                # duration of status line messages
set -g repeat-time 500                  # timeout to repeat a key without pressing Prefix again (bind -r)
set -g detach-on-destroy off            # switch to the most recently active of the remaining sessions
set -g remain-on-exit off               # do not keep pane when program exits
set -g allow-rename off                 # prevent commands from changing the window name
set -g automatic-rename on              # let tmux choose the window name until one is set manually
set -g aggressive-resize on             # windows are automatically resized when the client size changes

# Change Prefix key to C-a, easier to type, same to "screen"
unbind C-b
set -g prefix C-a

# Set parent terminal title to reflect current window in tmux session 
set -g set-titles on
set -g set-titles-string "tmux(#S) - #I:#W"

# Start index of window/pane with 1, because we're humans, not computers
set -g base-index 1
set -g renumber-windows on
set -g pane-base-index 1

# Enable mouse support
set -g mouse on

DEFAULT_LAYOUT="main-vertical"
DEFAULT_HW="60%"

# ==========================
# ===   Key bindings     ===
# ==========================

# Unbind some default key bindings that will be overriden or not used
# OBS: C-m = ENTER / C-[ = ESC / IC = Insert key
unbind [        # paste-buffer
unbind ]        # copy-mode
unbind l        # last-window
unbind m        # select-pane -m
unbind n        # next-window
unbind p        # previous-window
unbind r        # refresh-client
unbind =        # choose-buffer
unbind "\$"     # rename-session
unbind -        # delete-buffer
unbind D        # choose-client -Z
unbind M        # select-pane -M
unbind S-Down   # refresh-client -D 10
unbind S-Left   # refresh-client -L 10
unbind S-Right  # refresh-client -R 10
unbind S-Up     # refresh-client -U 10

# Edit configuration and reload
bind -N "Edit configuration and reload" C-e new-window -n 'tmux.conf' "sh -c '\${EDITOR:-vim} ~/.config/tmux/tmux.conf && tmux source ~/.config/tmux/tmux.conf && tmux display \"Config reloaded\"'"

# Reload tmux configuration
bind -N "Reload configuration" M-r source-file ~/.config/tmux/tmux.conf \; display "Config reloaded"

# New window and retain cwd
bind -N "New window and retain cwd" c new-window -c "#{pane_current_path}" \; select-layout

# Prompt to rename window right after it's created (if enabled, press ESC to use automatic-rename)
# set-hook -g after-new-window 'command-prompt -I "#{window_name}" "rename-window '%%'"'

# Rename session and window
bind -N "Rename window" r command-prompt -I "#{window_name}" "rename-window '%%'"
bind -N "Rename sessions" R command-prompt -I "#{session_name}" "rename-session '%%'"

# Split panes
bind -N "Split horizontally (keep layout)" '\' split-window -h -c "#{pane_current_path}" \; select-layout
bind -N "Split horizontally " '|' split-window -h -c "#{pane_current_path}"
bind -N "Split vertically (keep layout)" '-' split-window -v -c "#{pane_current_path}" \; select-layout
bind -N "Split vertically" '_' split-window -v -c "#{pane_current_path}"

# Even panes
bind -N "Even panes" '=' select-layout -E

# Apply default layout
bind -N "Apply default layout" l select-layout $DEFAULT_LAYOUT

# Swap pane and windows
bind -N "Swap window left (C-[)" -r C-[ swap-window -t -1\; select-window -t -1
bind -N "Swap window right (C-])" -r C-] swap-window -t +1\; select-window -t +1
bind -N "Swap next pane" ']' swap-pane -D               # swap current pane with the next one
bind -N "Swap previous pane" '[' swap-pane -U           # swap current pane with the previous one

# Zoom pane
bind -N "Zoom pane" + resize-pane -Z

# Link window
bind -N "Link window" C-l command-prompt -p "Link window from (session:window): " "link-window -s %% -a"

# Swap panes back and forth with 1st pane
# When in main-(horizontal|vertical) layouts, the biggest/widest panel is always @1
bind -N "Swap pane with main one" C-'\' if "[ #{pane_index} -eq 1 ]" \
     "swap-pane -s \"!\"" \
     "select-pane -t:.1 ; swap-pane -d -t 1 -s \"!\""

# Kill pane/window/session shortcuts
bind -N "Kill pane" x confirm-before -p "kill pane #P? (y/N)" kill-pane \; select-layout
bind -N "Kill window" X confirm-before -p "kill window #W? (y/N)" kill-window
bind -N "Kill other windows" C-x confirm-before -p "kill other windows? (y/N)" "kill-window -a"
bind -N "Kill session" C-q confirm-before -p "kill-session #S? (y/N)" kill-session

# Merge session with another one (e.g. move all windows)
# If you use adhoc 1-window sessions, and you want to preserve session upon exit
# but don't want to create a lot of small unnamed 1-window sessions around
# move all windows from current session to main named one (dev, work, etc)
bind -N "Merge session" C-u command-prompt -p "Session to merge with: " \
   "run-shell 'yes | head -n #{session_windows} | xargs -I {} -n 1 tmux movew -t %%'"

# Detach from session
bind -N "Detach session" d confirm-before -p 'detach from session #S? (y/N)' detach
bind -N "Detach other sessions" D if -F '#{session_many_attached}' \
    'confirm-before -p "Detach other clients? (y/N)" "detach -a"' \
    'display "Session has only 1 client attached"'

# Hide status bar on demand
bind -N "Toggle status bar visibility" C-t if -F '#{s/off//:status}' 'set status off' 'set status on'

# Toggle pane synchronization
bind -N "Toggle pane synchronization" S if -F '#{pane_synchronized}' 'setw synchronize-panes off' 'setw synchronize-panes on'

# Toggle mouse mode
bind -N "Toggle mouse mode (C-m)" C-m setw mouse \; display "Mouse [#{?mouse,ON,OFF}]"

# Flip the orientation of the current pane with the pane <arrow-way>-of
bind -N "Flip orientation of up-of" S-Up move-pane -h -t '.{up-of}'
bind -N "Flip orientation with right-of" S-Right move-pane -t '.{right-of}'
bind -N "Flip orientation with left-of" S-Left move-pane -t '.{left-of}'
bind -N "Flip orientation wind down-of" S-down move-pane -h -t '.{down-of}'

# Create new panes
bind -N "Split window (keep layout)" n split-window \; select-layout

# Navigate windows faster
bind -N "Select next window" -r C-n next-window
bind -N "Select previous window" -r C-p previous-window
bind -N "Select next window with alert" -r C-Tab next-window -a
bind -N "Select previous window with alert" -r C-S-Tab previous-window -a
bind -N "Go to most recent window" -r Tab last-window   # cycle thru MRU windows
bind -N "Go to most recent window" -r a last-window     # cycle thru MRU windows, same key used in Prefix

# Double click empty area of status bar to create a new window
bind -N "New window and retain cwd" -T root DoubleClick1StatusDefault \
    new-window -c "#{pane_current_path}" \; select-layout

# ==================================================
# === Window monitoring for activity and silence ===
# ==================================================

bind -N "Toggle Monitor Activity" m setw monitor-activity \; display-message 'Monitor window activity [#{?monitor-activity,ON,OFF}]'
bind -N "Enable Monitor Silence" M if -F '#{monitor-silence}' \
    'setw monitor-silence 0 ; display-message "Monitor window silence [OFF]"' \
    'command-prompt -p "Monitor silence: interval (s)" "setw monitor-silence %%"'

# Activity bell and whistles [on (message only) | off (no message) | both (message and bell)]
set -g visual-activity both
set -g visual-silence both
set -g visual-bell both

# Which window(s) can bell [any | none | current | other]
set -g bell-action any

# ================================================
# ===     Copy mode, scroll and clipboard      ===
# ================================================

set -g @copy_use_osc52_fallback on

# Prefer vi style key table
setw -g mode-keys vi

bind -N "Paste most recent buffer" p paste-buffer -p
bind -N "List buffers" b list-buffers
bind -N "Choose/Edit buffers" C-b choose-buffer -Z

# trigger copy mode by
bind -N "Enter copy mode" C-IC copy-mode

# Scroll up/down by 1 line, half screen, whole screen
bind -T copy-mode-vi M-Up              send-keys -X scroll-up
bind -T copy-mode-vi M-Down            send-keys -X scroll-down
bind -T copy-mode-vi M-PageUp          send-keys -X halfpage-up
bind -T copy-mode-vi M-PageDown        send-keys -X halfpage-down
bind -T copy-mode-vi PageDown          send-keys -X page-down
bind -T copy-mode-vi PageUp            send-keys -X page-up

# When scrolling with mouse wheel, reduce number of scrolled rows per tick to "2" (default is 5)
bind -T copy-mode-vi WheelUpPane       select-pane \; send-keys -X -N 2 scroll-up
bind -T copy-mode-vi WheelDownPane     select-pane \; send-keys -X -N 2 scroll-down

# wrap default shell in reattach-to-user-namespace if available
# there is some hack with `exec & reattach`, credits to "https://github.com/gpakosz/.tmux"
# don't really understand how it works, but at least window are not renamed to "reattach-to-user-namespace"
if -b "command -v reattach-to-user-namespace > /dev/null 2>&1" \
    "run 'tmux set -g default-command \"exec $(tmux show -gv default-shell) 2>/dev/null & reattach-to-user-namespace -l $(tmux show -gv default-shell)\"'"

yank="~/.config/tmux/yank.sh"

# Copy selected text
bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "$yank"
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "$yank"
bind -T copy-mode-vi Y send-keys -X copy-line \;\
    run "tmux save-buffer - | $yank"
bind -T copy-mode-vi D send-keys -X copy-end-of-line \;\
    run "tmux save-buffer - | $yank"
bind -T copy-mode-vi C-j send-keys -X copy-pipe-and-cancel "$yank"
bind -T copy-mode-vi A send-keys -X append-selection-and-cancel \;\
    run "tmux save-buffer - | $yank"

# Copy selection on drag end event, but do not cancel copy mode and do not clear selection
# clear select on subsequence mouse click
bind -T copy-mode-vi MouseDragEnd1Pane \
    send-keys -X copy-pipe-no-clear "$yank"
bind -T copy-mode-vi MouseDown1Pane select-pane \;\
   send-keys -X clear-selection
    
# iTerm2 works with clipboard out of the box, set-clipboard already set to "external"
# tmux show-options -g -s set-clipboard
# set-clipboard on|external

# ==============================================
# ===     Direct Keybindings (no Prefix)     ===
# === Caution: may conflict with other apps  ===
# ==============================================

# New window and retain cwd
bind -N "New window and retain cwd" -T root M-t new-window -c "#{pane_current_path}" \; select-layout

# Create and kill panes direcly, applying the current layout
bind -N "Kill pane" -T root M-x confirm-before -p "kill pane? (y/N)" kill-pane \; select-layout
bind -N "Split window (keep layout)" -T root M-n split-window \; select-layout

# Alt-arrow keys to navigate panes directly
bind -N "Select pane right, or next window if none" -T root M-Right \
    if '[ #{window_panes} -eq 1 ] || [ $((#{window_width} - #{pane_right})) -le 1 ]' 'next-window' 'select-pane -R'
bind -N "Select pane left, or previous window if none" -T root M-Left \
    if '[ #{window_panes} -eq 1 ] || [ #{pane_left} -eq 0 ]' 'previous-window' 'select-pane -L'
# Comment above and uncomment the 2 below to move only between panes
# bind -N "Select pane right" -T root M-Right ''select-pane -R'
# bind -N "Select pane left" -T root M-Left 'select-pane -L'

bind -N "Select pane up" -T root M-Up select-pane -U
bind -N "Select pane down" -T root M-Down select-pane -D

# Ctrl-Tab to navigate windows directly
bind -N "Select next window" -T root C-Tab next-window
bind -N "Select previous window" -T root C-S-Tab previous-window
# bind -T root S-Right next-window
# bind -T root S-Left previous-window

# Enter copy mode, cancel if PageDown to bottom
bind -T root C-S-Up copy-mode -e

# =====================================
# ===           Theme               ===
# =====================================

# Feel free to NOT use this variables at all (remove, rename)
# this are named colors, just for convenience
color_orange="colour166" # 208, 166
color_purple="colour134" # 135, 134
color_green="colour076" # 070
color_blue="colour39"
color_yellow="colour220"
color_red="colour160"
color_black="colour232"
color_white="white" # 015

# This is a theme CONTRACT, you are required to define variables below
# Change values, but not remove/rename variables itself
color_dark="$color_black"
color_light="$color_white"
color_session_text="$color_blue"
color_status_text="colour245"
color_main="$color_orange"
color_secondary="$color_purple"
color_level_ok="$color_green"
color_level_warn="$color_yellow"
color_level_stress="$color_red"
color_window_off_indicator="colour088"
color_window_off_status_bg="colour238"
color_window_off_status_current_bg="colour254"

# =====================================
# ===    Appearence and status bar  ===
# ======================================

set -g mode-style "fg=default,bg=$color_main"

# command line style
set -g message-style "fg=$color_main,bg=$color_dark"

# status line style
set -g status-style "fg=$color_status_text,bg=$color_dark"

# window segments in status line
set -g window-status-separator ""
separator_powerline_left=""
separator_powerline_right=""

setw -g window-status-style "fg=$color_status_text,bg=$color_dark"
setw -g window-status-format " #I:#W[#F] "
setw -g window-status-current-style "fg=$color_dark,bold,bg=$color_main"
setw -g window-status-current-format "#[fg=$color_dark,bg=$color_main]$separator_powerline_right#[default] #I:#W[#F] #[fg=$color_main,bg=$color_dark]$separator_powerline_right#[default]"

# when window has monitoring notification
setw -g window-status-activity-style "fg=$color_main"

# outline for active pane
setw -g pane-active-border-style "fg=$color_main"

# general status bar settings
set -g status on
set -g status-interval 3
set -g status-position top
set -g status-justify left
set -g status-right-length 100

# define widgets we're going to use in status bar
# note, that this is not the complete list, some of them are loaded from plugins
wg_session="#[fg=$color_session_text] #S #[default]"
wg_battery="#{battery_icon} #{battery_color_charge_fg}#[bg=#{?#{==:#{prefix},None},,$color_dark}]#{battery_percentage}#[default]"
wg_date="#[fg=$color_secondary]%a %H:%M#[default]"
u="ps -t #{pane_tty} -o user= --sort start | tail -1"
wg_user_host="#[fg=#{?#{==:#($u),root},$color_main,$color_secondary}]#($u)#[default]@#h"
wg_is_zoomed="#[fg=$color_secondary]#[bg=#{?#{==:#{prefix},None},,$color_dark}]#{?window_zoomed_flag,[Z],}#[default]"
# TODO: highlighted for nested local session as well
wg_is_keys_off="#[fg=$color_light,bg=$color_window_off_indicator]#{?#{==:#{prefix},None},OFF,}#[default]"
wg_continuum="#[fg=#{?#{==:#{prefix},None},$color_window_off_status_bg,$color_dark}]#{continuum_status}#[default]"

# Set status panel
set -g status-left "$wg_session"
set -g status-right "$wg_continuum$wg_is_keys_off $wg_is_zoomed #{sysstat_cpu} #{sysstat_mem} #{sysstat_swap} $wg_user_host $wg_date $wg_battery #{prefix_highlight} #{online_status} "

# online and offline icon for tmux-online-status
set -g @online_icon "#[fg=$color_level_ok]●#[default]"
set -g @offline_icon "#[fg=$color_level_stress]●#[default]"

# Configure view templates for tmux-plugin-sysstat "MEM" and "CPU" widget
set -g @sysstat_mem_view_tmpl 'MEM:#[fg=#{mem.color}]#{mem.pused}#[default]'

# Configure colors for tmux-plugin-sysstat "MEM" and "CPU" widget
set -g @sysstat_cpu_color_low "$color_level_ok"
set -g @sysstat_cpu_color_medium "$color_level_warn"
set -g @sysstat_cpu_color_stress "$color_level_stress"

set -g @sysstat_mem_color_low "$color_level_ok"
set -g @sysstat_mem_color_medium "$color_level_warn"
set -g @sysstat_mem_color_stress "$color_level_stress"

set -g @sysstat_swap_color_low "$color_level_ok"
set -g @sysstat_swap_color_medium "$color_level_warn"
set -g @sysstat_swap_color_stress "$color_level_stress"

# Configure tmux-battery widget colors
set -g @batt_color_charge_primary_tier8 "$color_status_text"
set -g @batt_color_charge_primary_tier7 "$color_status_text"
set -g @batt_color_charge_primary_tier6 "$color_status_text"
set -g @batt_color_charge_primary_tier5 "$color_status_text"
set -g @batt_color_charge_primary_tier4 "$color_level_warn"
set -g @batt_color_charge_primary_tier3 "$color_level_warn"
set -g @batt_color_charge_primary_tier2 "$color_level_stress"
set -g @batt_color_charge_primary_tier1 "$color_level_stress"

# Configure tmux-prefix-highlight colors
set -g @prefix_highlight_output_prefix '['
set -g @prefix_highlight_output_suffix ']'
set -g @prefix_highlight_fg "$color_secondary"
set -g @prefix_highlight_bg "$color_dark"
set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_show_sync_mode 'on'
set -g @prefix_highlight_empty_prompt '[ ]'
set -g @prefix_highlight_prefix_prompt 'P'
set -g @prefix_highlight_copy_prompt 'C'
set -g @prefix_highlight_sync_prompt 'S'
set -g @prefix_highlight_copy_mode_attr "fg=$color_secondary,bg=$color_dark"
set -g @prefix_highlight_sync_mode_attr "fg=$color_secondary,bg=$color_dark"

# =====================================
# ===        Renew environment      ===
# =====================================
set -g update-environment \
  "DISPLAY\
  SSH_ASKPASS\
  SSH_AUTH_SOCK\
  SSH_AGENT_PID\
  SSH_CONNECTION\
  SSH_TTY\
  WINDOWID\
  XAUTHORITY"

bind '$' run "~/.config/tmux/renew_env.sh"

# ============================
# ===       Plugins        ===
# ============================
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-battery'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'tmux-plugins/tmux-online-status'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-open'
set -g @plugin 'samoshkin/tmux-plugin-sysstat'
set -g @plugin 'joshmedeski/t-smart-tmux-session-manager'
set -g @plugin 'tmux-plugins/tmux-continuum'        # it must be the last plugin

# Plugin properties
#set -g @continuum-save-interval '15'                # save interval in minutes, 0 to disable
set -g @continuum-restore 'off'                     # automatic session restore
set -g @open-editor 'O'                             # open with $EDITOR key binding
set -g @open-S 'https://search.brave.com/search?q=' # open Search URL
set -g @resurrect-capture-pane-contents 'on'        # enable to restore pane contents
set -g @route_to_ping '9.9.9.9'                     # online-status ping address

# ==============================================
# ===   Nesting local and remote sessions     ===
# ==============================================

# Session is considered to be remote when we ssh into host
if-shell 'test -n "$SSH_CLIENT"' \
    'source-file ~/.config/tmux/tmux.remote.conf'

# We want to have single prefix key "C-a", usable both for local and remote session
# we don't want to "C-a" + "a" approach either
# Idea is to turn off all key bindings and prefix handling on local session,
# so that all keystrokes are passed to inner/remote session

# see: toggle on/off all keybindings · Issue #237 · tmux/tmux - https://github.com/tmux/tmux/issues/237

# Also, change some visual styles when window keys are off
bind -N "Lock Mode (disable key bindings, press F12 again to revert)" -T root F12 \
    set prefix None \;\
    set key-table off \;\
    set status-style "fg=$color_status_text,bg=$color_window_off_status_bg" \;\
    set window-status-current-format "#[fg=$color_window_off_status_bg,bg=$color_window_off_status_current_bg]$separator_powerline_right#[default] #I:#W[#F] #[fg=$color_window_off_status_current_bg,bg=$color_window_off_status_bg]$separator_powerline_right#[default]" \;\
    set window-status-current-style "fg=$color_dark,bold,bg=$color_window_off_status_current_bg" \;\
    if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
    refresh-client -S \;\

bind -T off F12 \
  set -u prefix \;\
  set -u key-table \;\
  set -u status-style \;\
  set -u window-status-current-style \;\
  set -u window-status-current-format \;\
  refresh-client -S

# Run all plugins' scripts
run '~/.config/tmux/plugins/tpm/tpm'

run -b '~/.config/tmux/startup.sh'

